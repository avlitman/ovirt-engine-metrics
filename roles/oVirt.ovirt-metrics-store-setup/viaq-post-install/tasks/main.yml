- name: Log into logging project
  shell: oc project logging
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: Remove metrics and logs index uuid files
  file:
    state: absent
    path: '{{ item }}'
  with_items:
    - /root/ovirt-metrics-{{ ovirt_env_name }}-uuid
    - /root/ovirt-logs-{{ ovirt_env_name }}-uuid
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: Getting the ovirt-metrics-{{ ovirt_env_name}} uuid
  shell: oc get project ovirt-metrics-{{ ovirt_env_name }} -o jsonpath='{.metadata.uid}' > /tmp/ovirt-metrics-{{ ovirt_env_name }}-uuid
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: Getting the ovirt-logs-{{ ovirt_env_name}} uuid
  shell: oc get project ovirt-logs-{{ ovirt_env_name}} -o jsonpath='{.metadata.uid}' > /tmp/ovirt-logs-{{ ovirt_env_name}}-uuid
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: Getting CA cert
  shell: |
    {% raw %}
    oc get secret logging-fluentd --template='{{ index .data "ca" }}' | base64 -d > /tmp/fluentd-ca
    {% endraw %}
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: Getting SSL client certificate
  shell: |
    {% raw %}
    oc get secret logging-fluentd --template='{{index .data "cert"}}' | base64 -d > /tmp/fluentd-cert
    {% endraw %}
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: GettingSSL client key
  shell: |
    {% raw %}
    oc get secret logging-fluentd --template='{{index .data "key"}}' | base64 -d > /tmp/fluentd-key
    {% endraw %}
  delegate_to: "{{ fluentd_elasticsearch_host }}"

- name: Create admin user
  shell: oc create user admin
  delegate_to: "{{ fluentd_elasticsearch_host }}"
  ignore_errors: True

- name: Create an Identity with identity provider allow_all
  shell: oc create identity allow_all:admin
  delegate_to: "{{ fluentd_elasticsearch_host }}"
  ignore_errors: True

- name: Create a user/identity mapping for the created user and identity
  shell: oc create useridentitymapping allow_all:admin admin
  delegate_to: "{{ fluentd_elasticsearch_host }}"
  ignore_errors: True

- name: Binds the admin role to specified users for all projects in the cluster
  shell: oadm policy add-cluster-role-to-user cluster-admin admin
  delegate_to: "{{ fluentd_elasticsearch_host }}"
  ignore_errors: True

- name: Assign the password immediately without login
  shell: oc login --username=admin --password=admin
  delegate_to: "{{ fluentd_elasticsearch_host }}"
  ignore_errors: True

- name: Log back in as admin user
  shell: oc login --username=system:admin
  delegate_to: "{{ fluentd_elasticsearch_host }}"