---
# Create bastion machine

- name: Create OpenShift installer vm
  include_role:
    name: oVirt.vm-infra

- block:
  - name: Login to oVirt
    ovirt_auth:
      url: '{{ engine_url|mandatory }}'
      username: '{{ engine_user|mandatory }}'
      password: '{{ engine_password|mandatory }}'
      insecure: '{{ engine_insecure }}'
      ca_file: '{{ engine_cafile }}'
    when: ovirt_auth is undefined or not ovirt_auth
    no_log: true
    register: loggedin

  - name: Collect oVirt VM facts
    ovirt_vm_facts:
      auth: '{{ ovirt_auth }}'
      pattern: 'name={{ openshift_ovirt_bastion_machine_name }} and cluster={{ ovirt_cluster_name }}'
      fetch_nested: true
      nested_attributes: ips
    no_log: true
    until: ansible_facts.ovirt_vms[0].fqdn is defined
    retries: 5
    delay: 60

  - name: Set bastion_machine_ip_address fact
    set_fact:
      bastion_machine_ip_address: "{{ item.1.address }}"
    with_subelements:
      - "{{ ansible_facts.ovirt_vms[0].reported_devices }}"
      - ips
    when:
      - item.1.version  == 'v4'
      - create_host_entry|d(false)|bool == true
    ignore_errors: true

  - name: Add dns line to /etc/hosts if create_host_entry true
    lineinfile:
      path: /etc/hosts
      regexp: '{{ openshift_ovirt_bastion_machine_name }}'
      line: "{{ bastion_machine_ip_address }} {{ ansible_facts.ovirt_vms[0].fqdn }} {{ openshift_ovirt_bastion_machine_name }}"
      owner: root
      group: root
      mode: 0644
    when: create_host_entry|d(false)|bool == true
    ignore_errors: true

  always:
    - name: Logout from oVirt
      ovirt_auth:
        state: absent
        ovirt_auth: '{{ ovirt_auth }}'
      when: not loggedin.skipped | default(false)

- name: Set fact of the bastion machine FQDN
  set_fact:
    bastion_machine_fqdn: "{{ ansible_facts.ovirt_vms[0].fqdn }}"

- debug:
    msg: "{{bastion_machine_fqdn}}"

- name: Generate bastion machine RSA private host key
  command: ssh-keygen -q -t rsa -f ./bastion_id_rsa -C "" -N ""
  args:
    creates: ./bastion_id_rsa
  delegate_to: '{{ bastion_machine_fqdn }}'

- name: Generate bastion public ssh key
  shell: ssh-keygen -y -f ./bastion_id_rsa > ./bastion_id_rsa.pub
  args:
    creates: ./bastion_id_rsa.pub
  delegate_to: '{{ bastion_machine_fqdn }}'

- name: Copy install_okd.yaml, vars.yaml and integ.ini to bastion machine
  copy:
    src: '{{ origin_on_ovirt_files_path }}/{{ item }}'
    dest: '{{ openshift_ansible_files_path }}/{{ item }}'
    mode: 0644
  with_items:
    - '{{ openshift_ansible_files }}'
  delegate_to: '{{ bastion_machine_fqdn }}'

- name: Check if secure_vars.yaml file exist
  stat:
    path: '{{ origin_on_ovirt_secure_vars_file }}'
  register: secure_vars_file_exists

- name: Copy secure_vars.yaml to bastion machine
  copy:
    src: '{{ origin_on_ovirt_secure_vars_file }}'
    dest: '{{ openshift_ansible_files_path }}/secure_vars.yaml'
    mode: 0644
    decrypt: no
  delegate_to: '{{ bastion_machine_fqdn }}'
  when: secure_vars_file_exists.stat.exists

- block:
    - name: Install origin base packages
      yum:
        name: '{{ packages }}'
        state: latest
      vars:
        packages: "{{ ovirt_origin_bastion_base_packages }}"
      delegate_to: '{{ bastion_machine_fqdn }}'
      when: manage_packages|default(true)

    - name: Add ansible27 repository
      yum_repository:
        name: configmanagement-ansible27
        description: configmanagement-ansible27
        file: external_repos
        baseurl: http://mirror.centos.org/$contentdir/7/configmanagement/$basearch/ansible27/
        mirrorlist: http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=configmanagement-ansible27
        enabled: yes
      delegate_to: '{{ bastion_machine_fqdn }}'

    - name: Upgrade all packages
      yum:
        name: '*'
        state: latest
      delegate_to: '{{ bastion_machine_fqdn }}'
      register: task_result
      when: manage_packages|default(true)

    - name: Reboot system
      reboot:
        reboot_timeout: 300
      delegate_to: '{{ bastion_machine_fqdn }}'
      when:
        - task_result is changed
        - manage_packages|default(true)

    - name: Install packages
      yum:
        name: '{{ packages }}'
        state: latest
      vars:
        packages: "{{ ovirt_origin_bastion_packages }}"
      delegate_to: '{{ bastion_machine_fqdn }}'

    - name: Clean openshift-ansibale path
      file:
        state: absent
        path: '{{ openshift_ansible_role_path }}'
      delegate_to: '{{ bastion_machine_fqdn }}'

    - name: Clone openshift-ansible repo
      git:
        repo: 'https://github.com/openshift/openshift-ansible.git'
        dest: '{{ openshift_ansible_role_path }}'
        version: release-3.11
      delegate_to: '{{ bastion_machine_fqdn }}'
  when:
    - openshift_distribution == 'origin'
    - manage_packages|default(true)

- block:
    - name: Register the system using subscription manager
      redhat_subscription:
        state: present
        username: '{{ rhsub_user }}'
        password: '{{ rhsub_pass }}'
        pool_ids: '{{ rhsub_pool }}'
      delegate_to: '{{ bastion_machine_fqdn }}'
      no_log: true

    - name: Disable all RHSM repositories
      rhsm_repository:
        name: '*'
        state: disabled
      delegate_to: '{{ bastion_machine_fqdn }}'

    - name: Enable a RHSM repository
      rhsm_repository:
        name: '{{ ovirt_ocp_bastion_enable_repo }}'
      delegate_to: '{{ bastion_machine_fqdn }}'

    - name: Install OpenShift Enterprise base packages
      yum:
        name: '{{ packages }}'
        state: latest
      vars:
        packages: "{{ ovirt_ocp_bastion_base_packages }}"
      delegate_to: '{{ bastion_machine_fqdn }}'
      when: manage_packages|default(true)

    - name: Upgrade all packages
      yum:
        name: '*'
        state: latest
      delegate_to: '{{ bastion_machine_fqdn }}'
      register: task_result
      when: manage_packages|default(true)

    - name: Reboot system
      reboot:
        reboot_timeout: 300
      delegate_to: '{{ bastion_machine_fqdn }}'
      when:
        - task_result is changed
        - manage_packages|default(true)

    - name: Install packages
      yum:
        name: '{{ packages }}'
        state: latest
      vars:
        packages: "{{ ovirt_ocp_bastion_packages }}"
      delegate_to: '{{ bastion_machine_fqdn }}'
      when: manage_packages|default(true)

    - name: Unregister the system using subscription manager
      redhat_subscription:
        state: absent
        username: '{{ rhsub_user }}'
        password: '{{ rhsub_pass }}'
      delegate_to: '{{ bastion_machine_fqdn }}'
      no_log: true
  when: openshift_distribution != 'origin' and manage_packages

- debug:
    msg: '{{ bastion_machine_fqdn }} was created successfully'
  delegate_to: '{{ bastion_machine_fqdn }}'
